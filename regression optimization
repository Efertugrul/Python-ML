#Program developed by EE
import matplotlib.pyplot as plt
# We get gradient of slope in for ai to determine movement way.
def gradient_intercept(x, y, intercept, slope):
  dataAmount = len(y)
  sumOfSqErrors = 0
  for i in range(dataAmount):
    sumOfSqErrors += (y[i]-(intercept + (slope*x[i])))
  gradientOfIntercept = -(2/dataAmount) * sumOfSqErrors  
  return gradientOfIntercept

def gradient_slope(x, y, t, s):
  dataAmount = len(x)
  sumOfSqErrors = 0
  for i in range(dataAmount):
      sumOfSqErrors += x[i] * (y[i] - ((s * x[i]) + t))
  t_gradient = -(2/dataAmount) * sumOfSqErrors  
  return t_gradient

#Your step_gradient function here
def step_gradient(tAssume, sAssume, x, y, learningRate):
    t_gradient = gradient_intercept(x, y, tAssume, sAssume)
    s_gradient = gradient_slope(x, y, tAssume, sAssume)
    t = tAssume - (learningRate * t_gradient)
    s = sAssume - (learningRate * s_gradient)
    return [t, s]
  
#gradient_descent function here:  
def gradient_descent(x, y, learningRate, numIterations):
  t = 0
  s = 0
  for i in range(numIterations):
    t, s = step_gradient(t, s, x, y, learningRate)
  return [t,s]  




